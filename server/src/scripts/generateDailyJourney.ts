// File: server/src/scripts/generateDailyJourney.ts

import 'dotenv/config';
import mongoose from 'mongoose';
import { GoogleGenerativeAI } from '@google/generative-ai';
import DailyJourney from '../models/DailyJourney';

export const generateDailyJourney = async () => {
  if (!process.env.GEMINI_API_KEY || !process.env.MONGO_URI) {
    throw new Error('Required environment variables are not defined');
  }
  const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  const generativeModel = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

  const generateJourneyFromAI = async (date: string, year: number) => {
    // --- THIS PROMPT HAS BEEN UPDATED ---
    const prompt = `
      You are an elite AI mentor for UPSC CSE aspirants. Your task is to create a "Daily Learning Journey" for today, ${date}.
    This journey consists of exactly 5 pairs of questions. Each pair MUST contain:

    1.  'ca_question': A highly analytical question based on a major national or international news event that has been a headline in 'The Hindu' or 'Indian Express' within the last 48 hours. The question MUST be framed in an editorial style and end with a source and date tag, for example, "(The Hindu, 4 Oct 2025)".
    2.  'related_pyq': A REAL UPSC CSE Mains Previous Year Question (from GS Paper 1, 2, 3, or 4) that is conceptually linked to the 'ca_question'. The question MUST end with the paper and year, for example, "(UPSC GS-2, 2019)".

    The goal is to bridge the gap between dynamic current affairs and the static syllabus.
        CRITICAL INSTRUCTION: THE CURRENT YEAR IS ${year}. All 'ca_question' must be from a significant news event within the last 48 hours of THIS YEAR (${year}). Ignore the year in the date '${date}' if it is not ${year}.
       IMPORTANT: The 'related_pyq' MUST be an actual question asked in a previous UPSC CSE Mains exam. Fabricated or modified questions are NOT allowed.

    IMPORTANT INSTRUCTIONS:
    - The output MUST be a single, valid JSON object with a single key "journey" which is an array of 5 objects.
    - Each object in the array must have two keys: "ca_question" and "related_pyq".
    - Do NOT include any markdown, explanations, or text outside the JSON structure.

    Example Output Structure:
    {
      "journey": [
        {
          "ca_question": "In light of the recent RBI monetary policy announcement, critically analyze its impact on controlling inflation while promoting growth. (The Hindu, 4 Oct 2025)",
          "related_pyq": "Do you agree that the Indian economy has experienced V-shaped recovery? Give reasons in support of your answer. (UPSC GS-3, 2021)"
        },
        {
          "ca_question": "Examine the geopolitical significance of India's 'Neighborhood First' policy given the recent leadership changes in the Maldives. (Indian Express, 3 Oct 2025)",
          "related_pyq": "‘India’s relations with Israel have, of late, acquired a depth and diversity, which cannot be rolled back.’ Discuss. (UPSC GS-2, 2018)"
        }
      ]
    }
    `;
    try {
      const result = await generativeModel.generateContent(prompt);
      let responseText = result.response.text();
      const jsonMatch = responseText.match(/```json\n([\s\S]*?)\n```/);
      if (jsonMatch && jsonMatch[1]) {
        responseText = jsonMatch[1];
      }
      const parsed = JSON.parse(responseText);
      return parsed.journey;
    } catch (error) {
      console.error('Error generating journey from AI:', error);
      return null;
    }
  };

  try {
    // This helper correctly formats the date for the Indian timezone.
const getIndiaDateStrings = () => {
    const now = new Date();
    const year = now.toLocaleString('en-US', { year: 'numeric', timeZone: 'Asia/Kolkata' });
    const month = now.toLocaleString('en-US', { month: '2-digit', timeZone: 'Asia/Kolkata' });
    const day = now.toLocaleString('en-US', { day: '2-digit', timeZone: 'Asia/Kolkata' });
    const queryString = `${day}-${month}-${year}`; // Format: DD-MM-YYYY
    const displayString = `${parseInt(day, 10)} ${now.toLocaleString('en-IN', { month: 'long', timeZone: 'Asia/Kolkata' })} ${year}`;
    return { queryString, displayString, year: parseInt(year, 10) };
};
const { queryString: todayQueryString, displayString: todayDisplayString, year: currentYear } = getIndiaDateStrings();


    // Log the date being sent to the AI to confirm the issue.
    console.log(`Date string being generated by server: ${todayDisplayString}`);

    const existing = await DailyJourney.findOne({ journeyDate: todayQueryString });
    if (existing) {
      console.log(`Journey for ${todayQueryString} already exists.`);
      return;
    }

    console.log('Generating new daily journey from AI with correct year...');
    const questions = await generateJourneyFromAI(todayDisplayString, currentYear);
    if (!questions || questions.length === 0) {
      throw new Error('Failed to generate questions.');
    }

    const newJourney = new DailyJourney({ journeyDate: todayQueryString, questions });
    await newJourney.save();
    console.log('Successfully saved new daily journey.');
  } catch (error) {
    console.error('An error occurred during the journey generation:', error);
    throw error;
  }
};